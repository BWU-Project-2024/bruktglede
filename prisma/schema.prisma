// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// The '?' = means it is an optional field

model User {
  id       Int           @id @default(autoincrement())
  username String        @unique
  email    String        @unique
  password String
  store    Store?
  userRole Role          @relation(fields: [roleId], references: [id])
  roleId   Int
  account  UserSession[]

  @@unique([username, email]) //there can only be one user with the same username and email
  @@index([username]) //set a index for username for easier quering/sorting later
}

model UserSession {
  id            String  @id @default(cuid())
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String @unique
  users User[]
}

model Store {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       Int            @unique
  name         String         @unique
  img          String
  description  String
  tags         Tag[]
  stations     Station[]
  posts        Post[]
  openingTimes OpeningTimes[]

  @@index([name]) //set a index for (store)name for easier quering/sorting later
}

model OpeningTimes {
  id          Int     @id @default(autoincrement())
  open        Boolean @default(true)
  day         Day     @relation(fields: [dayId], references: [id])
  dayId       Int     @unique
  openingHour Int?
  closingHour Int?
  store       Store   @relation(fields: [storeId], references: [id])
  storeId     Int

  @@unique([dayId, storeId]) // The store could only have one of each day type
}

model Day {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  openingTimes OpeningTimes?
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  stores   Store[]
  stations Station[]
  posts    Post[]
}

model Station {
  id      Int    @id @default(autoincrement())
  title   String
  address String
  tags    Tag[]
  store   Store  @relation(fields: [storeId], references: [id])
  storeId Int

  @@unique([title, address]) // The store could not have two stations with the same title and address
}

model Post {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @db.Date
  updatedAt  DateTime @updatedAt
  img        String?
  title      String
  ingress    String?
  subtitle   String?
  bodyText   String?
  tags       Tag[]
  author     Store    @relation(fields: [authorId], references: [id])
  authorId   Int
  postType   PostType @relation(fields: [postTypeId], references: [id])
  postTypeId Int
}

model PostType {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}
