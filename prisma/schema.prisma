// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// The '?' = means it is an optional field

model User {
  id       Int    @id @default(autoincrement())
  userRole Role   @default(SUPERUSER)
  username String @unique
  email    String @unique
  password String
  store    Store?

  @@unique([username, email]) //there can only be one user with the same username and email
  @@index([username]) //set a index for username for easier quering/sorting later
}

model Store {
  id          Int            @id @default(autoincrement())
  user        User           @relation(fields: [userId], references: [id])
  userId      Int            @unique
  name        String
  img         String
  description String
  tags        Tag[]
  stations    Station[]
  posts       Post[]
  OpeningTime OpeningTimes[]

  @@index([name]) //set a index for (store)name for easier quering/sorting later
}

model OpeningTimes {
  id          Int     @id @default(autoincrement())
  day         Day     @default(MANDAG)
  open        Boolean @default(true)
  openingHour Int
  closingHour Int
  store       Store   @relation(fields: [storeId], references: [id])
  storeId     Int

  @@unique([day, storeId]) // The store could only have one of each day type
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  stores   Store[]
  stations Station[]
  posts    Post[]
}

model Station {
  id      Int    @id @default(autoincrement())
  title   String
  address String
  tags    Tag[]
  store   Store  @relation(fields: [storeId], references: [id])
  storeId Int
}

model Post {
  id        Int      @id @default(autoincrement())
  postType  PostType @default(ARTIKKEL)
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt
  img       String?
  title     String
  ingress   String?
  subtitle  String?
  bodyText  String?
  tags      Tag[]
  author    Store    @relation(fields: [authorId], references: [id])
  authorId  Int
}

enum Role {
  USER
  ADMIN
  SUPERUSER
}

enum PostType {
  ARRANGEMENT
  ARTIKKEL
  HOYDEPUNKT
}

enum Day {
  MANDAG
  TIRSDAG
  ONSDAG
  TORSDAG
  FREDAG
  LORDAG
  SONDAG
}
